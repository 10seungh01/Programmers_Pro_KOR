#include<iostream>
#include<string>
#include <vector>

std::vector<int> cmp_Onum_Xnum(std::vector<std::string> board)          // Counting 'O' num and 'X' num function
{
	int numO = 0;
	int numX = 0;
	std::vector<int> res_vec={2,NULL};              // Room for numO, numX
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			if (board[i][j] == 'O')
				numO++;
			else if (board[i][j] == 'X')
				numX++;
			else
				continue;
		}
	}
	res_vec[0] = numO;
	res_vec[1] = numX;
	return res_vec;
}

bool IS_BINGO(std::vector<std::string> board, char c)           // Judging if there's BINGO function
{
	int pos_sum_row = 0;                  // There is horizontal BINGO?
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			if (board[i][j] == c)
				pos_sum_row++;
		}
		if (pos_sum_row == 3)
			return true;
		else pos_sum_row = 0;           //ready to begin next row
	}

	int pos_sum_col = 0;                 // There is vertical BINGO?
	for (int j = 0; j < 3; j++)
	{
		for (int i = 0; i < 3; i++)
		{
			if (board[i][j] == c)
				pos_sum_col++;
		}
		if (pos_sum_col == 3)
			return true;
		else pos_sum_col = 0;           // ready to begin next column
	}

	int pos_sum_diag = 0;              // There is '\' diagonal BINGO?
	for (int k = 0; k < 3; k++)
	{
		if (board[k][k] == c)
			pos_sum_diag++;
	}
	if (pos_sum_diag == 3)
		return true;

	pos_sum_diag = 0;                   // There is '/' diagonal BINGO?
	for (int m = 0; m < 3; m++)
	{
		if (board[m][2 - m] == c) 
			pos_sum_diag++;
	}
	if (pos_sum_diag == 3)
		return true;

	return false;
}

int solution(std::vector<std::string> board) 
{
	int answer = 1;

	std::vector<int> OXnum_vec=cmp_Onum_Xnum(board);

    // Impossible_1 because 'X' num exceeds 'O' num
	if ((OXnum_vec[0] < OXnum_vec[1]) ||  ((OXnum_vec[0] - OXnum_vec[1]) > 1)  )
	    return 0;

	bool bO = IS_BINGO(board, 'O');     //IS_BINGO of 'O' run
	bool bX = IS_BINGO(board, 'X');     //IS_BINGO of 'X' run
    
	if (bX && OXnum_vec[1] < OXnum_vec[0])      // Impossible_2 because 'X' Bingo was done, but 'O' had move again
		return 0;
	
	else if (bO && OXnum_vec[1] == OXnum_vec[0])    // Impossible_3 because 'O' Bingo was done, but 'X' had move again
		return 0;
	
	std::cout << "board의 결과는 성공입니다." << std::endl;  // If any Impossible cases were occured, its result is possible
	return answer; 
}
